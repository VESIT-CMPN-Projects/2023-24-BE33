<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Emotion Detector</title>
    <style>
        /* Add your CSS styles here */
        #video-container {
            width: 640px;
            height: 480px;
            margin: 20px auto;
            position: relative;
        }
        #video-feed {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        #emotion-label {
            position: absolute;
            bottom: 10px;
            left: 10px;
            background-color: rgba(255, 255, 255, 0.7);
            padding: 5px;
        }
        button {
            margin: 10px;
            padding: 10px 20px;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <h1>Emotion Detector</h1>

    <div id="video-container">
        <video id="video-feed" autoplay playsinline></video>
        <p id="emotion-label"></p>
    </div>

    <button id="real-time-button">Real-Time Detection</button>
    <button id="stop-button">Stop Detection</button>

    <input type="file" id="video-file" accept=".mp4, .avi, .mkv">
    <button id="upload-button">Upload Video</button>

    <script>
        // Add your JavaScript code here
        const video = document.getElementById('video-feed');
        const emotionLabel = document.getElementById('emotion-label');
        const realTimeButton = document.getElementById('real-time-button');
        const stopButton = document.getElementById('stop-button');
        const uploadInput = document.getElementById('video-file');
        const uploadButton = document.getElementById('upload-button');

        let videoStream = null;

        // Function to start real-time video detection
        async function startRealTimeDetection() {
            stopDetection(); // Stop any existing detection
            try {
                videoStream = await navigator.mediaDevices.getUserMedia({ video: true });
                video.srcObject = videoStream;
            } catch (error) {
                console.error('Error accessing webcam:', error);
            }
        }

        // Function to stop real-time video detection
        function stopDetection() {
            if (videoStream) {
                videoStream.getTracks().forEach(track => track.stop());
                video.srcObject = null;
            }
        }

        // Function to handle uploaded video
        function handleUploadedVideo(event) {
            const file = event.target.files[0];
            if (file) {
                stopDetection(); // Stop any existing detection
                const url = URL.createObjectURL(file);
                video.src = url;
            }
        }

        // Event listeners for buttons
        realTimeButton.addEventListener('click', startRealTimeDetection);
        stopButton.addEventListener('click', stopDetection);
        uploadInput.addEventListener('change', handleUploadedVideo);
    </script>
</body>
</html>
